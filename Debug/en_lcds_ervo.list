
en_lcds_ervo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003980  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b00  08003b00  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003b00  08003b00  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b00  08003b00  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000090  08003b98  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003b98  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bbd  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fa  00000000  00000000  00028c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f13  00000000  00000000  0002b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2a7  00000000  00000000  000436fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889dd  00000000  00000000  0004e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d737f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e8c  00000000  00000000  000d73d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a78 	.word	0x08003a78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08003a78 	.word	0x08003a78

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f000 fb7f 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f879 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 f9af 	bl	8000cac <MX_GPIO_Init>
  MX_TIM1_Init();
 800094e:	f000 f8bb 	bl	8000ac8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000952:	f000 f959 	bl	8000c08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ///////************lcd config*****************
  Alcd_Init(&lcd1, 2, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2102      	movs	r1, #2
 800095a:	4830      	ldr	r0, [pc, #192]	; (8000a1c <main+0xe0>)
 800095c:	f002 faa2 	bl	8002ea4 <Alcd_Init>
 // Alcd_PutAt(&lcd1,1,0,"HAzEM");
  Alcd_PutAt_n(&lcd1, 0, 0, "kiroo", Str_Len("kiroo"));
 8000960:	482f      	ldr	r0, [pc, #188]	; (8000a20 <main+0xe4>)
 8000962:	f002 fbc7 	bl	80030f4 <Str_Len>
 8000966:	4603      	mov	r3, r0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <main+0xe4>)
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	482a      	ldr	r0, [pc, #168]	; (8000a1c <main+0xe0>)
 8000974:	f002 fb51 	bl	800301a <Alcd_PutAt_n>
 // Alcd_Clear(&lcd1);
  ////////********encoder and servo config**************
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Start the counter for the encoder
 8000978:	213c      	movs	r1, #60	; 0x3c
 800097a:	482a      	ldr	r0, [pc, #168]	; (8000a24 <main+0xe8>)
 800097c:	f001 fc3c 	bl	80021f8 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // For output to the servo
 8000980:	2100      	movs	r1, #0
 8000982:	4829      	ldr	r0, [pc, #164]	; (8000a28 <main+0xec>)
 8000984:	f001 faf4 	bl	8001f70 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500); // Set a duty cycle for the servo
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <main+0xec>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(3000);
 8000992:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000996:	f000 fbb7 	bl	8001108 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        uint8_t encoder_counter = __HAL_TIM_GET_COUNTER(&htim2); // Get the counter of the encoder
 800099a:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <main+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	71fb      	strb	r3, [r7, #7]
        uint8_t degrees= (encoder_counter*180.0)/counts_per_rev;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fd2d 	bl	8000404 <__aeabi_i2d>
 80009aa:	f04f 0200 	mov.w	r2, #0
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <main+0xf0>)
 80009b0:	f7ff fd92 	bl	80004d8 <__aeabi_dmul>
 80009b4:	4602      	mov	r2, r0
 80009b6:	460b      	mov	r3, r1
 80009b8:	4610      	mov	r0, r2
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <main+0xf4>)
 80009c2:	f7ff feb3 	bl	800072c <__aeabi_ddiv>
 80009c6:	4602      	mov	r2, r0
 80009c8:	460b      	mov	r3, r1
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	f7ff ff95 	bl	80008fc <__aeabi_d2uiz>
 80009d2:	4603      	mov	r3, r0
 80009d4:	71bb      	strb	r3, [r7, #6]


        uint32_t pwm_val = degree_pwm(degrees); // Convert degrees to PWM value
 80009d6:	79bb      	ldrb	r3, [r7, #6]
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 f989 	bl	8000cf0 <degree_pwm>
 80009de:	6038      	str	r0, [r7, #0]
        sprintf(degree_counter, "the angle %d", degrees);
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	461a      	mov	r2, r3
 80009e4:	4913      	ldr	r1, [pc, #76]	; (8000a34 <main+0xf8>)
 80009e6:	4814      	ldr	r0, [pc, #80]	; (8000a38 <main+0xfc>)
 80009e8:	f002 fbcc 	bl	8003184 <siprintf>
          Alcd_PutAt_n(&lcd1, 0, 0,degree_counter , strlen(degree_counter));
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <main+0xfc>)
 80009ee:	f7ff fbaf 	bl	8000150 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <main+0xfc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <main+0xe0>)
 8000a00:	f002 fb0b 	bl	800301a <Alcd_PutAt_n>

       // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val); // Set PWM value for servo
        htim1.Instance->CCR1 = pwm_val;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <main+0xec>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_Delay(100); // Delay for stability
 8000a0c:	2064      	movs	r0, #100	; 0x64
 8000a0e:	f000 fb7b 	bl	8001108 <HAL_Delay>
        Alcd_Clear(&lcd1);
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <main+0xe0>)
 8000a14:	f002 fb1a 	bl	800304c <Alcd_Clear>
    {
 8000a18:	e7bf      	b.n	800099a <main+0x5e>
 8000a1a:	bf00      	nop
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	08003a90 	.word	0x08003a90
 8000a24:	200000f4 	.word	0x200000f4
 8000a28:	200000ac 	.word	0x200000ac
 8000a2c:	40668000 	.word	0x40668000
 8000a30:	40340000 	.word	0x40340000
 8000a34:	08003a98 	.word	0x08003a98
 8000a38:	2000013c 	.word	0x2000013c

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b090      	sub	sp, #64	; 0x40
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0318 	add.w	r3, r7, #24
 8000a46:	2228      	movs	r2, #40	; 0x28
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fb92 	bl	8003174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 0318 	add.w	r3, r7, #24
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fde3 	bl	8001650 <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a90:	f000 f958 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	230f      	movs	r3, #15
 8000a96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2102      	movs	r1, #2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 f850 	bl	8001b54 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aba:	f000 f943 	bl	8000d44 <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3740      	adds	r7, #64	; 0x40
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b096      	sub	sp, #88	; 0x58
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
 8000af6:	615a      	str	r2, [r3, #20]
 8000af8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2220      	movs	r2, #32
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 fb37 	bl	8003174 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b06:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b08:	4a3e      	ldr	r2, [pc, #248]	; (8000c04 <MX_TIM1_Init+0x13c>)
 8000b0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8000b0c:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b0e:	2248      	movs	r2, #72	; 0x48
 8000b10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000b18:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b1a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b32:	4833      	ldr	r0, [pc, #204]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b34:	f001 f974 	bl	8001e20 <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b3e:	f000 f901 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482c      	ldr	r0, [pc, #176]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b50:	f001 fca2 	bl	8002498 <HAL_TIM_ConfigClockSource>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b5a:	f000 f8f3 	bl	8000d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b5e:	4828      	ldr	r0, [pc, #160]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b60:	f001 f9ad 	bl	8001ebe <HAL_TIM_PWM_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b6a:	f000 f8eb 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4820      	ldr	r0, [pc, #128]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000b7e:	f001 fff7 	bl	8002b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b88:	f000 f8dc 	bl	8000d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8c:	2360      	movs	r3, #96	; 0x60
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	2200      	movs	r2, #0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4813      	ldr	r0, [pc, #76]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000bb2:	f001 fbaf 	bl	8002314 <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000bbc:	f000 f8c2 	bl	8000d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000be4:	f002 f822 	bl	8002c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000bee:	f000 f8a9 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM1_Init+0x138>)
 8000bf4:	f000 f938 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 8000bf8:	bf00      	nop
 8000bfa:	3758      	adds	r7, #88	; 0x58
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000ac 	.word	0x200000ac
 8000c04:	40012c00 	.word	0x40012c00

08000c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2224      	movs	r2, #36	; 0x24
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 faac 	bl	8003174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <MX_TIM2_Init+0xa0>)
 8000c26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_TIM2_Init+0xa0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_TIM2_Init+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_TIM2_Init+0xa0>)
 8000c3a:	2214      	movs	r2, #20
 8000c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM2_Init+0xa0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_TIM2_Init+0xa0>)
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <MX_TIM2_Init+0xa0>)
 8000c76:	f001 fa1d 	bl	80020b4 <HAL_TIM_Encoder_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c80:	f000 f860 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_TIM2_Init+0xa0>)
 8000c92:	f001 ff6d 	bl	8002b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c9c:	f000 f852 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	3730      	adds	r7, #48	; 0x30
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000f4 	.word	0x200000f4

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_GPIO_Init+0x40>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <MX_GPIO_Init+0x40>)
 8000cb8:	f043 0320 	orr.w	r3, r3, #32
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_GPIO_Init+0x40>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_GPIO_Init+0x40>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <MX_GPIO_Init+0x40>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <MX_GPIO_Init+0x40>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000

08000cf0 <degree_pwm>:

/* USER CODE BEGIN 4 */
/*uint32_t degree_pwm(uint32_t degree_value ){
	return ((degree_value*1000)/180)+1000;
};*/
uint32_t degree_pwm(uint8_t degree_value) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
    // Clamp the degree value to the range -90 to 90
   /* if (degree_value < -90) degree_value = -90;
    if (degree_value > 90) degree_value = 90;*/

    // Calculate PWM value based on the adjusted degrees
    return ((degree_value+90) * (1000.0 / 180)) + 1000;
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	335a      	adds	r3, #90	; 0x5a
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fb80 	bl	8000404 <__aeabi_i2d>
 8000d04:	a30c      	add	r3, pc, #48	; (adr r3, 8000d38 <degree_pwm+0x48>)
 8000d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0a:	f7ff fbe5 	bl	80004d8 <__aeabi_dmul>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <degree_pwm+0x50>)
 8000d1c:	f7ff fa26 	bl	800016c <__adddf3>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	f7ff fde8 	bl	80008fc <__aeabi_d2uiz>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	8e38e38e 	.word	0x8e38e38e
 8000d3c:	401638e3 	.word	0x401638e3
 8000d40:	408f4000 	.word	0x408f4000

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_MspInit+0x5c>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a14      	ldr	r2, [pc, #80]	; (8000dac <HAL_MspInit+0x5c>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_MspInit+0x5c>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_MspInit+0x5c>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_MspInit+0x5c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	61d3      	str	r3, [r2, #28]
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_MspInit+0x5c>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_MspInit+0x60>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_MspInit+0x60>)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000

08000db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <HAL_TIM_Base_MspInit+0x34>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10b      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_TIM_Base_MspInit+0x38>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_TIM_Base_MspInit+0x38>)
 8000dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_TIM_Base_MspInit+0x38>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40012c00 	.word	0x40012c00
 8000dec:	40021000 	.word	0x40021000

08000df0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e0e:	d123      	bne.n	8000e58 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_TIM_Encoder_MspInit+0x70>)
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <HAL_TIM_Encoder_MspInit+0x70>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	61d3      	str	r3, [r2, #28]
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_TIM_Encoder_MspInit+0x70>)
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_TIM_Encoder_MspInit+0x70>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <HAL_TIM_Encoder_MspInit+0x70>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_TIM_Encoder_MspInit+0x70>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e40:	2303      	movs	r3, #3
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	4804      	ldr	r0, [pc, #16]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x74>)
 8000e54:	f000 fa60 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010800 	.word	0x40010800

08000e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_TIM_MspPostInit+0x5c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d118      	bne.n	8000eba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_TIM_MspPostInit+0x60>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_TIM_MspPostInit+0x60>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_TIM_MspPostInit+0x60>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_TIM_MspPostInit+0x64>)
 8000eb6:	f000 fa2f 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40012c00 	.word	0x40012c00
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f16:	f000 f8db 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f002 f8e6 	bl	8003120 <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20005000 	.word	0x20005000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	20000150 	.word	0x20000150
 8000f88:	20000168 	.word	0x20000168

08000f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff fff8 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f9e:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fb4:	4c09      	ldr	r4, [pc, #36]	; (8000fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f002 f8b3 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc6:	f7ff fcb9 	bl	800093c <main>
  bx lr
 8000fca:	4770      	bx	lr
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fd4:	08003b08 	.word	0x08003b08
  ldr r2, =_sbss
 8000fd8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fdc:	20000168 	.word	0x20000168

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>
	...

08000fe4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <DWT_Delay_Init+0x58>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <DWT_Delay_Init+0x58>)
 8000fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ff2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <DWT_Delay_Init+0x58>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <DWT_Delay_Init+0x58>)
 8000ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ffe:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <DWT_Delay_Init+0x5c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <DWT_Delay_Init+0x5c>)
 8001006:	f023 0301 	bic.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <DWT_Delay_Init+0x5c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <DWT_Delay_Init+0x5c>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <DWT_Delay_Init+0x5c>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800101e:	bf00      	nop
     __ASM volatile ("NOP");
 8001020:	bf00      	nop
  __ASM volatile ("NOP");
 8001022:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <DWT_Delay_Init+0x5c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800102c:	2300      	movs	r3, #0
 800102e:	e000      	b.n	8001032 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001030:	2301      	movs	r3, #1
  }
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000edf0 	.word	0xe000edf0
 8001040:	e0001000 	.word	0xe0001000

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x28>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f92b 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	200f      	movs	r0, #15
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fe76 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f935 	bl	80012fe <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f90b 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000020 	.word	0x20000020
 80010c8:	20000028 	.word	0x20000028
 80010cc:	20000024 	.word	0x20000024

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x1c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x20>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_IncTick+0x20>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	20000028 	.word	0x20000028
 80010f0:	20000154 	.word	0x20000154

080010f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <HAL_GetTick+0x10>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	20000154 	.word	0x20000154

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff fff0 	bl	80010f4 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffe0 	bl	80010f4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000028 	.word	0x20000028

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff90 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff49 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff5e 	bl	8001198 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffb0 	bl	800126c <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e169      	b.n	8001600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8158 	bne.w	80015fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a9a      	ldr	r2, [pc, #616]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d05e      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001354:	4a98      	ldr	r2, [pc, #608]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d875      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800135a:	4a98      	ldr	r2, [pc, #608]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d058      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001360:	4a96      	ldr	r2, [pc, #600]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d86f      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001366:	4a96      	ldr	r2, [pc, #600]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d052      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 800136c:	4a94      	ldr	r2, [pc, #592]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d869      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001372:	4a94      	ldr	r2, [pc, #592]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d04c      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001378:	4a92      	ldr	r2, [pc, #584]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d863      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800137e:	4a92      	ldr	r2, [pc, #584]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d046      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001384:	4a90      	ldr	r2, [pc, #576]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d85d      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800138a:	2b12      	cmp	r3, #18
 800138c:	d82a      	bhi.n	80013e4 <HAL_GPIO_Init+0xcc>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d859      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <HAL_GPIO_Init+0x80>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	08001413 	.word	0x08001413
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080013ff 	.word	0x080013ff
 80013a4:	08001441 	.word	0x08001441
 80013a8:	08001447 	.word	0x08001447
 80013ac:	08001447 	.word	0x08001447
 80013b0:	08001447 	.word	0x08001447
 80013b4:	08001447 	.word	0x08001447
 80013b8:	08001447 	.word	0x08001447
 80013bc:	08001447 	.word	0x08001447
 80013c0:	08001447 	.word	0x08001447
 80013c4:	08001447 	.word	0x08001447
 80013c8:	08001447 	.word	0x08001447
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001447 	.word	0x08001447
 80013d4:	08001447 	.word	0x08001447
 80013d8:	08001447 	.word	0x08001447
 80013dc:	080013f5 	.word	0x080013f5
 80013e0:	08001409 	.word	0x08001409
 80013e4:	4a79      	ldr	r2, [pc, #484]	; (80015cc <HAL_GPIO_Init+0x2b4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ea:	e02c      	b.n	8001446 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	623b      	str	r3, [r7, #32]
          break;
 80013f2:	e029      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	3304      	adds	r3, #4
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e024      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	3308      	adds	r3, #8
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e01f      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	330c      	adds	r3, #12
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e01a      	b.n	8001448 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800141a:	2304      	movs	r3, #4
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e013      	b.n	8001448 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	611a      	str	r2, [r3, #16]
          break;
 8001432:	e009      	b.n	8001448 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	615a      	str	r2, [r3, #20]
          break;
 800143e:	e003      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x130>
          break;
 8001446:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d801      	bhi.n	8001452 <HAL_GPIO_Init+0x13a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_Init+0x13e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d802      	bhi.n	8001464 <HAL_GPIO_Init+0x14c>
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x152>
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	3b08      	subs	r3, #8
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	210f      	movs	r1, #15
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	6a39      	ldr	r1, [r7, #32]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80b1 	beq.w	80015fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001498:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a4c      	ldr	r2, [pc, #304]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b0:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_GPIO_Init+0x2bc>)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <HAL_GPIO_Init+0x2c0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <HAL_GPIO_Init+0x1ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a3f      	ldr	r2, [pc, #252]	; (80015dc <HAL_GPIO_Init+0x2c4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1e8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3e      	ldr	r2, [pc, #248]	; (80015e0 <HAL_GPIO_Init+0x2c8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1e0>
 80014f4:	2303      	movs	r3, #3
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001504:	2300      	movs	r3, #0
 8001506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001516:	492f      	ldr	r1, [pc, #188]	; (80015d4 <HAL_GPIO_Init+0x2bc>)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	492c      	ldr	r1, [pc, #176]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4928      	ldr	r1, [pc, #160]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	4922      	ldr	r1, [pc, #136]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	60cb      	str	r3, [r1, #12]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	491e      	ldr	r1, [pc, #120]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001570:	4013      	ands	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4918      	ldr	r1, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	4914      	ldr	r1, [pc, #80]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001598:	4013      	ands	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d021      	beq.n	80015ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e021      	b.n	80015fa <HAL_GPIO_Init+0x2e2>
 80015b6:	bf00      	nop
 80015b8:	10320000 	.word	0x10320000
 80015bc:	10310000 	.word	0x10310000
 80015c0:	10220000 	.word	0x10220000
 80015c4:	10210000 	.word	0x10210000
 80015c8:	10120000 	.word	0x10120000
 80015cc:	10110000 	.word	0x10110000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40010800 	.word	0x40010800
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40011000 	.word	0x40011000
 80015e4:	40011400 	.word	0x40011400
 80015e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_GPIO_Init+0x304>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4909      	ldr	r1, [pc, #36]	; (800161c <HAL_GPIO_Init+0x304>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	f47f ae8e 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	372c      	adds	r7, #44	; 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e272      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8087 	beq.w	800177e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001670:	4b92      	ldr	r3, [pc, #584]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b04      	cmp	r3, #4
 800167a:	d00c      	beq.n	8001696 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800167c:	4b8f      	ldr	r3, [pc, #572]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b08      	cmp	r3, #8
 8001686:	d112      	bne.n	80016ae <HAL_RCC_OscConfig+0x5e>
 8001688:	4b8c      	ldr	r3, [pc, #560]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001694:	d10b      	bne.n	80016ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001696:	4b89      	ldr	r3, [pc, #548]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d06c      	beq.n	800177c <HAL_RCC_OscConfig+0x12c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d168      	bne.n	800177c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e24c      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x76>
 80016b8:	4b80      	ldr	r3, [pc, #512]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a7f      	ldr	r2, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e02e      	b.n	8001724 <HAL_RCC_OscConfig+0xd4>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x98>
 80016ce:	4b7b      	ldr	r3, [pc, #492]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7a      	ldr	r2, [pc, #488]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b78      	ldr	r3, [pc, #480]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a77      	ldr	r2, [pc, #476]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e01d      	b.n	8001724 <HAL_RCC_OscConfig+0xd4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0xbc>
 80016f2:	4b72      	ldr	r3, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a71      	ldr	r2, [pc, #452]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6e      	ldr	r2, [pc, #440]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0xd4>
 800170c:	4b6b      	ldr	r3, [pc, #428]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a6a      	ldr	r2, [pc, #424]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a67      	ldr	r2, [pc, #412]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fce2 	bl	80010f4 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fcde 	bl	80010f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e200      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0xe4>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fcce 	bl	80010f4 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fcca 	bl	80010f4 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e1ec      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x10c>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d063      	beq.n	8001852 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800178a:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001796:	4b49      	ldr	r3, [pc, #292]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d11c      	bne.n	80017dc <HAL_RCC_OscConfig+0x18c>
 80017a2:	4b46      	ldr	r3, [pc, #280]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d116      	bne.n	80017dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_RCC_OscConfig+0x176>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e1c0      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4939      	ldr	r1, [pc, #228]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	e03a      	b.n	8001852 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e4:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <HAL_RCC_OscConfig+0x270>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fc83 	bl	80010f4 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fc7f 	bl	80010f4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1a1      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4927      	ldr	r1, [pc, #156]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
 8001824:	e015      	b.n	8001852 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <HAL_RCC_OscConfig+0x270>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fc62 	bl	80010f4 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001834:	f7ff fc5e 	bl	80010f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e180      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d03a      	beq.n	80018d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d019      	beq.n	800189a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_RCC_OscConfig+0x274>)
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7ff fc42 	bl	80010f4 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff fc3e 	bl	80010f4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e160      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_RCC_OscConfig+0x26c>)
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001892:	2001      	movs	r0, #1
 8001894:	f000 faa6 	bl	8001de4 <RCC_Delay>
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_RCC_OscConfig+0x274>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fc28 	bl	80010f4 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a6:	e00f      	b.n	80018c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc24 	bl	80010f4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d908      	bls.n	80018c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e146      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	42420000 	.word	0x42420000
 80018c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c8:	4b92      	ldr	r3, [pc, #584]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e9      	bne.n	80018a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80a6 	beq.w	8001a2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e6:	4b8b      	ldr	r3, [pc, #556]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10d      	bne.n	800190e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b88      	ldr	r3, [pc, #544]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a87      	ldr	r2, [pc, #540]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b82      	ldr	r3, [pc, #520]	; (8001b18 <HAL_RCC_OscConfig+0x4c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191a:	4b7f      	ldr	r3, [pc, #508]	; (8001b18 <HAL_RCC_OscConfig+0x4c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a7e      	ldr	r2, [pc, #504]	; (8001b18 <HAL_RCC_OscConfig+0x4c8>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7ff fbe5 	bl	80010f4 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192e:	f7ff fbe1 	bl	80010f4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b64      	cmp	r3, #100	; 0x64
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e103      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <HAL_RCC_OscConfig+0x4c8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x312>
 8001954:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a6e      	ldr	r2, [pc, #440]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	e02d      	b.n	80019be <HAL_RCC_OscConfig+0x36e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x334>
 800196a:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a69      	ldr	r2, [pc, #420]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a66      	ldr	r2, [pc, #408]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	e01c      	b.n	80019be <HAL_RCC_OscConfig+0x36e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b05      	cmp	r3, #5
 800198a:	d10c      	bne.n	80019a6 <HAL_RCC_OscConfig+0x356>
 800198c:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4a60      	ldr	r2, [pc, #384]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a5d      	ldr	r2, [pc, #372]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	e00b      	b.n	80019be <HAL_RCC_OscConfig+0x36e>
 80019a6:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a5a      	ldr	r2, [pc, #360]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a57      	ldr	r2, [pc, #348]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d015      	beq.n	80019f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fb95 	bl	80010f4 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff fb91 	bl	80010f4 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0b1      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e4:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0ee      	beq.n	80019ce <HAL_RCC_OscConfig+0x37e>
 80019f0:	e014      	b.n	8001a1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f2:	f7ff fb7f 	bl	80010f4 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff fb7b 	bl	80010f4 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e09b      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a10:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1ee      	bne.n	80019fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d105      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a22:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a3b      	ldr	r2, [pc, #236]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8087 	beq.w	8001b46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a38:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d061      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d146      	bne.n	8001ada <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <HAL_RCC_OscConfig+0x4cc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff fb4f 	bl	80010f4 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7ff fb4b 	bl	80010f4 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e06d      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a80:	d108      	bne.n	8001a94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4921      	ldr	r1, [pc, #132]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a19      	ldr	r1, [r3, #32]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	491b      	ldr	r1, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x4cc>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fb1f 	bl	80010f4 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	f7ff fb1b 	bl	80010f4 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e03d      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x46a>
 8001ad8:	e035      	b.n	8001b46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_RCC_OscConfig+0x4cc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fb08 	bl	80010f4 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fb04 	bl	80010f4 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e026      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x498>
 8001b06:	e01e      	b.n	8001b46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e019      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_OscConfig+0x500>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0d0      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d910      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b67      	ldr	r3, [pc, #412]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0207 	bic.w	r2, r3, #7
 8001b7e:	4965      	ldr	r1, [pc, #404]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0b8      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d020      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb0:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc8:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	4b50      	ldr	r3, [pc, #320]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	494d      	ldr	r1, [pc, #308]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d040      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e07f      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e073      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06b      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f023 0203 	bic.w	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4936      	ldr	r1, [pc, #216]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c44:	f7ff fa56 	bl	80010f4 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4c:	f7ff fa52 	bl	80010f4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e053      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 020c 	and.w	r2, r3, #12
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d1eb      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d210      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	4922      	ldr	r1, [pc, #136]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e032      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4916      	ldr	r1, [pc, #88]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ce2:	f000 f821 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	490a      	ldr	r1, [pc, #40]	; (8001d1c <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	5ccb      	ldrb	r3, [r1, r3]
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_RCC_ClockConfig+0x1cc>)
 8001cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_ClockConfig+0x1d0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f9b4 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40022000 	.word	0x40022000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08003aa8 	.word	0x08003aa8
 8001d20:	20000020 	.word	0x20000020
 8001d24:	20000024 	.word	0x20000024

08001d28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x30>
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x36>
 8001d56:	e027      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d5a:	613b      	str	r3, [r7, #16]
      break;
 8001d5c:	e027      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	0c9b      	lsrs	r3, r3, #18
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d010      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0c5b      	lsrs	r3, r3, #17
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d8a:	fb03 f202 	mul.w	r2, r3, r2
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e004      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	613b      	str	r3, [r7, #16]
      break;
 8001da6:	e002      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001daa:	613b      	str	r3, [r7, #16]
      break;
 8001dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dae:	693b      	ldr	r3, [r7, #16]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	007a1200 	.word	0x007a1200
 8001dc4:	08003ab8 	.word	0x08003ab8
 8001dc8:	08003ac8 	.word	0x08003ac8
 8001dcc:	003d0900 	.word	0x003d0900

08001dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000020 	.word	0x20000020

08001de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <RCC_Delay+0x34>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <RCC_Delay+0x38>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0a5b      	lsrs	r3, r3, #9
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e00:	bf00      	nop
  }
  while (Delay --);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1e5a      	subs	r2, r3, #1
 8001e06:	60fa      	str	r2, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f9      	bne.n	8001e00 <RCC_Delay+0x1c>
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	20000020 	.word	0x20000020
 8001e1c:	10624dd3 	.word	0x10624dd3

08001e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e041      	b.n	8001eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe ffb4 	bl	8000db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f000 fbe2 	bl	8002628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e041      	b.n	8001f54 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d106      	bne.n	8001eea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f839 	bl	8001f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f000 fb93 	bl	8002628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_TIM_PWM_Start+0x24>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e022      	b.n	8001fda <HAL_TIM_PWM_Start+0x6a>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d109      	bne.n	8001fae <HAL_TIM_PWM_Start+0x3e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	e015      	b.n	8001fda <HAL_TIM_PWM_Start+0x6a>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d109      	bne.n	8001fc8 <HAL_TIM_PWM_Start+0x58>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e008      	b.n	8001fda <HAL_TIM_PWM_Start+0x6a>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e05e      	b.n	80020a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d104      	bne.n	8001ff2 <HAL_TIM_PWM_Start+0x82>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ff0:	e013      	b.n	800201a <HAL_TIM_PWM_Start+0xaa>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d104      	bne.n	8002002 <HAL_TIM_PWM_Start+0x92>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002000:	e00b      	b.n	800201a <HAL_TIM_PWM_Start+0xaa>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d104      	bne.n	8002012 <HAL_TIM_PWM_Start+0xa2>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002010:	e003      	b.n	800201a <HAL_TIM_PWM_Start+0xaa>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	6839      	ldr	r1, [r7, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fd80 	bl	8002b28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_TIM_PWM_Start+0x138>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d107      	bne.n	8002042 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_TIM_PWM_Start+0x138>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00e      	beq.n	800206a <HAL_TIM_PWM_Start+0xfa>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002054:	d009      	beq.n	800206a <HAL_TIM_PWM_Start+0xfa>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_TIM_PWM_Start+0x13c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_TIM_PWM_Start+0xfa>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <HAL_TIM_PWM_Start+0x140>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d111      	bne.n	800208e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b06      	cmp	r3, #6
 800207a:	d010      	beq.n	800209e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208c:	e007      	b.n	800209e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800

080020b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e093      	b.n	80021f0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7fe fe87 	bl	8000df0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f8:	f023 0307 	bic.w	r3, r3, #7
 80020fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4610      	mov	r0, r2
 800210a:	f000 fa8d 	bl	8002628 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	4313      	orrs	r3, r2
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002154:	f023 030c 	bic.w	r3, r3, #12
 8002158:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	4313      	orrs	r3, r2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	011a      	lsls	r2, r3, #4
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	031b      	lsls	r3, r3, #12
 8002184:	4313      	orrs	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002192:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	4313      	orrs	r3, r2
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002208:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002210:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002218:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002220:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d110      	bne.n	800224a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800222e:	7b7b      	ldrb	r3, [r7, #13]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d001      	beq.n	8002238 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e069      	b.n	800230c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002248:	e031      	b.n	80022ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d110      	bne.n	8002272 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d102      	bne.n	800225c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002256:	7b3b      	ldrb	r3, [r7, #12]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d001      	beq.n	8002260 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e055      	b.n	800230c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002270:	e01d      	b.n	80022ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d108      	bne.n	800228a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d105      	bne.n	800228a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800227e:	7b7b      	ldrb	r3, [r7, #13]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d102      	bne.n	800228a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002284:	7b3b      	ldrb	r3, [r7, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e03e      	b.n	800230c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_TIM_Encoder_Start+0xc4>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d008      	beq.n	80022cc <HAL_TIM_Encoder_Start+0xd4>
 80022ba:	e00f      	b.n	80022dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fc2f 	bl	8002b28 <TIM_CCxChannelCmd>
      break;
 80022ca:	e016      	b.n	80022fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2201      	movs	r2, #1
 80022d2:	2104      	movs	r1, #4
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fc27 	bl	8002b28 <TIM_CCxChannelCmd>
      break;
 80022da:	e00e      	b.n	80022fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2201      	movs	r2, #1
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fc1f 	bl	8002b28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	2104      	movs	r1, #4
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fc18 	bl	8002b28 <TIM_CCxChannelCmd>
      break;
 80022f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800232e:	2302      	movs	r3, #2
 8002330:	e0ae      	b.n	8002490 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	f200 809f 	bhi.w	8002480 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	0800237d 	.word	0x0800237d
 800234c:	08002481 	.word	0x08002481
 8002350:	08002481 	.word	0x08002481
 8002354:	08002481 	.word	0x08002481
 8002358:	080023bd 	.word	0x080023bd
 800235c:	08002481 	.word	0x08002481
 8002360:	08002481 	.word	0x08002481
 8002364:	08002481 	.word	0x08002481
 8002368:	080023ff 	.word	0x080023ff
 800236c:	08002481 	.word	0x08002481
 8002370:	08002481 	.word	0x08002481
 8002374:	08002481 	.word	0x08002481
 8002378:	0800243f 	.word	0x0800243f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f9b2 	bl	80026ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0208 	orr.w	r2, r2, #8
 8002396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0204 	bic.w	r2, r2, #4
 80023a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6999      	ldr	r1, [r3, #24]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	619a      	str	r2, [r3, #24]
      break;
 80023ba:	e064      	b.n	8002486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f9f8 	bl	80027b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6999      	ldr	r1, [r3, #24]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	619a      	str	r2, [r3, #24]
      break;
 80023fc:	e043      	b.n	8002486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fa41 	bl	800288c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0208 	orr.w	r2, r2, #8
 8002418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0204 	bic.w	r2, r2, #4
 8002428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69d9      	ldr	r1, [r3, #28]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	61da      	str	r2, [r3, #28]
      break;
 800243c:	e023      	b.n	8002486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fa8b 	bl	8002960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69d9      	ldr	r1, [r3, #28]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	021a      	lsls	r2, r3, #8
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	61da      	str	r2, [r3, #28]
      break;
 800247e:	e002      	b.n	8002486 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	75fb      	strb	r3, [r7, #23]
      break;
 8002484:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_TIM_ConfigClockSource+0x1c>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0b4      	b.n	800261e <HAL_TIM_ConfigClockSource+0x186>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ec:	d03e      	beq.n	800256c <HAL_TIM_ConfigClockSource+0xd4>
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f2:	f200 8087 	bhi.w	8002604 <HAL_TIM_ConfigClockSource+0x16c>
 80024f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fa:	f000 8086 	beq.w	800260a <HAL_TIM_ConfigClockSource+0x172>
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	d87f      	bhi.n	8002604 <HAL_TIM_ConfigClockSource+0x16c>
 8002504:	2b70      	cmp	r3, #112	; 0x70
 8002506:	d01a      	beq.n	800253e <HAL_TIM_ConfigClockSource+0xa6>
 8002508:	2b70      	cmp	r3, #112	; 0x70
 800250a:	d87b      	bhi.n	8002604 <HAL_TIM_ConfigClockSource+0x16c>
 800250c:	2b60      	cmp	r3, #96	; 0x60
 800250e:	d050      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002510:	2b60      	cmp	r3, #96	; 0x60
 8002512:	d877      	bhi.n	8002604 <HAL_TIM_ConfigClockSource+0x16c>
 8002514:	2b50      	cmp	r3, #80	; 0x50
 8002516:	d03c      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0xfa>
 8002518:	2b50      	cmp	r3, #80	; 0x50
 800251a:	d873      	bhi.n	8002604 <HAL_TIM_ConfigClockSource+0x16c>
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d058      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d86f      	bhi.n	8002604 <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b30      	cmp	r3, #48	; 0x30
 8002526:	d064      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002528:	2b30      	cmp	r3, #48	; 0x30
 800252a:	d86b      	bhi.n	8002604 <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b20      	cmp	r3, #32
 800252e:	d060      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002530:	2b20      	cmp	r3, #32
 8002532:	d867      	bhi.n	8002604 <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b00      	cmp	r3, #0
 8002536:	d05c      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002538:	2b10      	cmp	r3, #16
 800253a:	d05a      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x15a>
 800253c:	e062      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f000 facc 	bl	8002aea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	609a      	str	r2, [r3, #8]
      break;
 800256a:	e04f      	b.n	800260c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6899      	ldr	r1, [r3, #8]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f000 fab5 	bl	8002aea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800258e:	609a      	str	r2, [r3, #8]
      break;
 8002590:	e03c      	b.n	800260c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	461a      	mov	r2, r3
 80025a0:	f000 fa2c 	bl	80029fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2150      	movs	r1, #80	; 0x50
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fa83 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80025b0:	e02c      	b.n	800260c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 fa4a 	bl	8002a58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2160      	movs	r1, #96	; 0x60
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fa73 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80025d0:	e01c      	b.n	800260c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 fa0c 	bl	80029fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2140      	movs	r1, #64	; 0x40
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fa63 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80025f0:	e00c      	b.n	800260c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4619      	mov	r1, r3
 80025fc:	4610      	mov	r0, r2
 80025fe:	f000 fa5a 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002602:	e003      	b.n	800260c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      break;
 8002608:	e000      	b.n	800260c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800260a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <TIM_Base_SetConfig+0xb8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00b      	beq.n	8002658 <TIM_Base_SetConfig+0x30>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002646:	d007      	beq.n	8002658 <TIM_Base_SetConfig+0x30>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <TIM_Base_SetConfig+0xbc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x30>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <TIM_Base_SetConfig+0xc0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <TIM_Base_SetConfig+0xb8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00b      	beq.n	800268a <TIM_Base_SetConfig+0x62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d007      	beq.n	800268a <TIM_Base_SetConfig+0x62>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <TIM_Base_SetConfig+0xbc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d003      	beq.n	800268a <TIM_Base_SetConfig+0x62>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <TIM_Base_SetConfig+0xc0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <TIM_Base_SetConfig+0xb8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d103      	bne.n	80026d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	615a      	str	r2, [r3, #20]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800

080026ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f023 0201 	bic.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f023 0302 	bic.w	r3, r3, #2
 8002734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <TIM_OC1_SetConfig+0xc8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10c      	bne.n	8002762 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0308 	bic.w	r3, r3, #8
 800274e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <TIM_OC1_SetConfig+0xc8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d111      	bne.n	800278e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	621a      	str	r2, [r3, #32]
}
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00

080027b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f023 0210 	bic.w	r2, r3, #16
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f023 0320 	bic.w	r3, r3, #32
 8002802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <TIM_OC2_SetConfig+0xd0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d10d      	bne.n	8002834 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a14      	ldr	r2, [pc, #80]	; (8002888 <TIM_OC2_SetConfig+0xd0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d113      	bne.n	8002864 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800284a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	40012c00 	.word	0x40012c00

0800288c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <TIM_OC3_SetConfig+0xd0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10d      	bne.n	8002906 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <TIM_OC3_SetConfig+0xd0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d113      	bne.n	8002936 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800291c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	621a      	str	r2, [r3, #32]
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00

08002960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	031b      	lsls	r3, r3, #12
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <TIM_OC4_SetConfig+0x98>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d109      	bne.n	80029d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	019b      	lsls	r3, r3, #6
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00

080029fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f023 0201 	bic.w	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 030a 	bic.w	r3, r3, #10
 8002a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0210 	bic.w	r2, r3, #16
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	031b      	lsls	r3, r3, #12
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f043 0307 	orr.w	r3, r3, #7
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b087      	sub	sp, #28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	021a      	lsls	r2, r3, #8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	609a      	str	r2, [r3, #8]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1a      	ldr	r2, [r3, #32]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e046      	b.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d009      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10c      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800

08002c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e03d      	b.n	8002cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
	...

08002cd0 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <DWT_Delay_us+0x40>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002cde:	f7ff f877 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <DWT_Delay_us+0x44>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0c9b      	lsrs	r3, r3, #18
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8002cf4:	bf00      	nop
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <DWT_Delay_us+0x40>)
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad2      	subs	r2, r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d3f8      	bcc.n	8002cf6 <DWT_Delay_us+0x26>
		;
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e0001000 	.word	0xe0001000
 8002d14:	431bde83 	.word	0x431bde83

08002d18 <usDelay>:
    usDelay(100); \
  } while (0) //BA3D EL MACRO MAFISH SMICOULMN

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ffd3 	bl	8002cd0 <DWT_Delay_us>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) //function tekteb bs fel 4 bits 3ashan anan fel 4bit mode
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);//write
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7a1b      	ldrb	r3, [r3, #8]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	230f      	movs	r3, #15
 8002d4c:	408b      	lsls	r3, r1
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	4619      	mov	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	400a      	ands	r2, r1
 8002d58:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	7a09      	ldrb	r1, [r1, #8]
 8002d66:	408b      	lsls	r3, r1
 8002d68:	4619      	mov	r1, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	60da      	str	r2, [r3, #12]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6958      	ldr	r0, [r3, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8b1b      	ldrh	r3, [r3, #24]
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	4619      	mov	r1, r3
 8002d94:	f7fe fc44 	bl	8001620 <HAL_GPIO_WritePin>
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68d8      	ldr	r0, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8a1b      	ldrh	r3, [r3, #16]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7fe fc32 	bl	8001620 <HAL_GPIO_WritePin>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	2301      	movs	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	2302      	movs	r3, #2
 8002de6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f107 0208 	add.w	r2, r7, #8
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe fa90 	bl	8001318 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8a1b      	ldrh	r3, [r3, #16]
 8002dfc:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f107 0208 	add.w	r2, r7, #8
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fa85 	bl	8001318 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;//da partial write 3ashan a7ded el bits beta3et el pins el wasla
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7a1b      	ldrb	r3, [r3, #8]
 8002e12:	461a      	mov	r2, r3
 8002e14:	230f      	movs	r3, #15
 8002e16:	4093      	lsls	r3, r2
 8002e18:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f107 0208 	add.w	r2, r7, #8
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe fa77 	bl	8001318 <HAL_GPIO_Init>
}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	70fb      	strb	r3, [r7, #3]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff98 	bl	8002d7c <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8002e4c:	78bb      	ldrb	r3, [r7, #2]
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff6c 	bl	8002d32 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff9f 	bl	8002da0 <EN_SET>
 8002e62:	200a      	movs	r0, #10
 8002e64:	f7ff ff58 	bl	8002d18 <usDelay>
 8002e68:	2100      	movs	r1, #0
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff98 	bl	8002da0 <EN_SET>
 8002e70:	2064      	movs	r0, #100	; 0x64
 8002e72:	f7ff ff51 	bl	8002d18 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8002e76:	78bb      	ldrb	r3, [r7, #2]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff59 	bl	8002d32 <Write_HalfByte>
	PulseEn
 8002e80:	2101      	movs	r1, #1
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ff8c 	bl	8002da0 <EN_SET>
 8002e88:	200a      	movs	r0, #10
 8002e8a:	f7ff ff45 	bl	8002d18 <usDelay>
 8002e8e:	2100      	movs	r1, #0
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff85 	bl	8002da0 <EN_SET>
 8002e96:	2064      	movs	r0, #100	; 0x64
 8002e98:	f7ff ff3e 	bl	8002d18 <usDelay>
	;
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	70fb      	strb	r3, [r7, #3]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8002eb4:	f7fe f896 	bl	8000fe4 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ff83 	bl	8002dc4 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	78ba      	ldrb	r2, [r7, #2]
 8002ece:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8002ed0:	78bb      	ldrb	r3, [r7, #2]
 8002ed2:	3340      	adds	r3, #64	; 0x40
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);//hena bedayt 4 bit mode intialization
 8002eda:	2100      	movs	r1, #0
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff4d 	bl	8002d7c <RS_SET>
	EN_SET(lcd, 0);
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff5b 	bl	8002da0 <EN_SET>
	usDelay(50000);//3AMELHA BE ZEYADA 3ASHAN ADman nafsy
 8002eea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002eee:	f7ff ff13 	bl	8002d18 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]
 8002ef6:	e018      	b.n	8002f2a <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8002ef8:	2103      	movs	r1, #3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ff19 	bl	8002d32 <Write_HalfByte>
		PulseEn
 8002f00:	2101      	movs	r1, #1
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ff4c 	bl	8002da0 <EN_SET>
 8002f08:	200a      	movs	r0, #10
 8002f0a:	f7ff ff05 	bl	8002d18 <usDelay>
 8002f0e:	2100      	movs	r1, #0
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff45 	bl	8002da0 <EN_SET>
 8002f16:	2064      	movs	r0, #100	; 0x64
 8002f18:	f7ff fefe 	bl	8002d18 <usDelay>
		;
		usDelay(4500);
 8002f1c:	f241 1094 	movw	r0, #4500	; 0x1194
 8002f20:	f7ff fefa 	bl	8002d18 <usDelay>
	for (x = 0; x < 2; x++)
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	3301      	adds	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d9e3      	bls.n	8002ef8 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8002f30:	2103      	movs	r1, #3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fefd 	bl	8002d32 <Write_HalfByte>
	PulseEn
 8002f38:	2101      	movs	r1, #1
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ff30 	bl	8002da0 <EN_SET>
 8002f40:	200a      	movs	r0, #10
 8002f42:	f7ff fee9 	bl	8002d18 <usDelay>
 8002f46:	2100      	movs	r1, #0
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff29 	bl	8002da0 <EN_SET>
 8002f4e:	2064      	movs	r0, #100	; 0x64
 8002f50:	f7ff fee2 	bl	8002d18 <usDelay>
	;
	usDelay(150);
 8002f54:	2096      	movs	r0, #150	; 0x96
 8002f56:	f7ff fedf 	bl	8002d18 <usDelay>
	Write_HalfByte(lcd, 0x02);//kda ana ba2olhA ANA HASHTAGHAL 4 BIT MODE
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fee8 	bl	8002d32 <Write_HalfByte>
	PulseEn
 8002f62:	2101      	movs	r1, #1
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff1b 	bl	8002da0 <EN_SET>
 8002f6a:	200a      	movs	r0, #10
 8002f6c:	f7ff fed4 	bl	8002d18 <usDelay>
 8002f70:	2100      	movs	r1, #0
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff14 	bl	8002da0 <EN_SET>
 8002f78:	2064      	movs	r0, #100	; 0x64
 8002f7a:	f7ff fecd 	bl	8002d18 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS); //E2RA EL DATA SHEET
 8002f7e:	2228      	movs	r2, #40	; 0x28
 8002f80:	2100      	movs	r1, #0
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ff55 	bl	8002e32 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f86d 	bl	800306e <Alcd_Display_Control>
	Alcd_Clear(lcd);//TAGANOBAN LE AY NOISE
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f859 	bl	800304c <Alcd_Clear>
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	7e9a      	ldrb	r2, [r3, #26]
 8002fba:	78bb      	ldrb	r3, [r7, #2]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2100      	movs	r1, #0
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff2f 	bl	8002e32 <Alcd_SendByte>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
 8002fee:	e00b      	b.n	8003008 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	60ba      	str	r2, [r7, #8]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f7ff ff18 	bl	8002e32 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	3301      	adds	r3, #1
 8003006:	75fb      	strb	r3, [r7, #23]
 8003008:	7dfa      	ldrb	r2, [r7, #23]
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	429a      	cmp	r2, r3
 800300e:	d3ef      	bcc.n	8002ff0 <Alcd_Put_n+0x14>
	}
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	72fb      	strb	r3, [r7, #11]
 8003028:	4613      	mov	r3, r2
 800302a:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 800302c:	7aba      	ldrb	r2, [r7, #10]
 800302e:	7afb      	ldrb	r3, [r7, #11]
 8003030:	4619      	mov	r1, r3
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff ffb5 	bl	8002fa2 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8003038:	7e3b      	ldrb	r3, [r7, #24]
 800303a:	461a      	mov	r2, r3
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff ffcc 	bl	8002fdc <Alcd_Put_n>
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8003054:	2201      	movs	r2, #1
 8003056:	2100      	movs	r1, #0
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff feea 	bl	8002e32 <Alcd_SendByte>
	usDelay(2000);
 800305e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003062:	f7ff fe59 	bl	8002d18 <usDelay>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	4608      	mov	r0, r1
 8003078:	4611      	mov	r1, r2
 800307a:	461a      	mov	r2, r3
 800307c:	4603      	mov	r3, r0
 800307e:	70fb      	strb	r3, [r7, #3]
 8003080:	460b      	mov	r3, r1
 8003082:	70bb      	strb	r3, [r7, #2]
 8003084:	4613      	mov	r3, r2
 8003086:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7f9b      	ldrb	r3, [r3, #30]
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	b2da      	uxtb	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 80030a2:	78bb      	ldrb	r3, [r7, #2]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7f9b      	ldrb	r3, [r3, #30]
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 80030b6:	787b      	ldrb	r3, [r7, #1]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7f9b      	ldrb	r3, [r3, #30]
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7f9b      	ldrb	r3, [r3, #30]
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7f9b      	ldrb	r3, [r3, #30]
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	2100      	movs	r1, #0
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fea3 	bl	8002e32 <Alcd_SendByte>
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <Str_Len>:
{
	SendByte(1, chr);
}

int Str_Len(char *string)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	int len = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
	while (*(string++))
 8003100:	e002      	b.n	8003108 <Str_Len+0x14>
	{
		len++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3301      	adds	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
	while (*(string++))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f6      	bne.n	8003102 <Str_Len+0xe>
	}
	return len;
 8003114:	68fb      	ldr	r3, [r7, #12]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <__errno>:
 8003120:	4b01      	ldr	r3, [pc, #4]	; (8003128 <__errno+0x8>)
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	2000002c 	.word	0x2000002c

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	2600      	movs	r6, #0
 8003130:	4d0c      	ldr	r5, [pc, #48]	; (8003164 <__libc_init_array+0x38>)
 8003132:	4c0d      	ldr	r4, [pc, #52]	; (8003168 <__libc_init_array+0x3c>)
 8003134:	1b64      	subs	r4, r4, r5
 8003136:	10a4      	asrs	r4, r4, #2
 8003138:	42a6      	cmp	r6, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	f000 fc9c 	bl	8003a78 <_init>
 8003140:	2600      	movs	r6, #0
 8003142:	4d0a      	ldr	r5, [pc, #40]	; (800316c <__libc_init_array+0x40>)
 8003144:	4c0a      	ldr	r4, [pc, #40]	; (8003170 <__libc_init_array+0x44>)
 8003146:	1b64      	subs	r4, r4, r5
 8003148:	10a4      	asrs	r4, r4, #2
 800314a:	42a6      	cmp	r6, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f855 3b04 	ldr.w	r3, [r5], #4
 8003154:	4798      	blx	r3
 8003156:	3601      	adds	r6, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f855 3b04 	ldr.w	r3, [r5], #4
 800315e:	4798      	blx	r3
 8003160:	3601      	adds	r6, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	08003b00 	.word	0x08003b00
 8003168:	08003b00 	.word	0x08003b00
 800316c:	08003b00 	.word	0x08003b00
 8003170:	08003b04 	.word	0x08003b04

08003174 <memset>:
 8003174:	4603      	mov	r3, r0
 8003176:	4402      	add	r2, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <siprintf>:
 8003184:	b40e      	push	{r1, r2, r3}
 8003186:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800318a:	b500      	push	{lr}
 800318c:	b09c      	sub	sp, #112	; 0x70
 800318e:	ab1d      	add	r3, sp, #116	; 0x74
 8003190:	9002      	str	r0, [sp, #8]
 8003192:	9006      	str	r0, [sp, #24]
 8003194:	9107      	str	r1, [sp, #28]
 8003196:	9104      	str	r1, [sp, #16]
 8003198:	4808      	ldr	r0, [pc, #32]	; (80031bc <siprintf+0x38>)
 800319a:	4909      	ldr	r1, [pc, #36]	; (80031c0 <siprintf+0x3c>)
 800319c:	f853 2b04 	ldr.w	r2, [r3], #4
 80031a0:	9105      	str	r1, [sp, #20]
 80031a2:	6800      	ldr	r0, [r0, #0]
 80031a4:	a902      	add	r1, sp, #8
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	f000 f868 	bl	800327c <_svfiprintf_r>
 80031ac:	2200      	movs	r2, #0
 80031ae:	9b02      	ldr	r3, [sp, #8]
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	b01c      	add	sp, #112	; 0x70
 80031b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031b8:	b003      	add	sp, #12
 80031ba:	4770      	bx	lr
 80031bc:	2000002c 	.word	0x2000002c
 80031c0:	ffff0208 	.word	0xffff0208

080031c4 <__ssputs_r>:
 80031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	688e      	ldr	r6, [r1, #8]
 80031ca:	4682      	mov	sl, r0
 80031cc:	429e      	cmp	r6, r3
 80031ce:	460c      	mov	r4, r1
 80031d0:	4690      	mov	r8, r2
 80031d2:	461f      	mov	r7, r3
 80031d4:	d838      	bhi.n	8003248 <__ssputs_r+0x84>
 80031d6:	898a      	ldrh	r2, [r1, #12]
 80031d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031dc:	d032      	beq.n	8003244 <__ssputs_r+0x80>
 80031de:	6825      	ldr	r5, [r4, #0]
 80031e0:	6909      	ldr	r1, [r1, #16]
 80031e2:	3301      	adds	r3, #1
 80031e4:	eba5 0901 	sub.w	r9, r5, r1
 80031e8:	6965      	ldr	r5, [r4, #20]
 80031ea:	444b      	add	r3, r9
 80031ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031f4:	106d      	asrs	r5, r5, #1
 80031f6:	429d      	cmp	r5, r3
 80031f8:	bf38      	it	cc
 80031fa:	461d      	movcc	r5, r3
 80031fc:	0553      	lsls	r3, r2, #21
 80031fe:	d531      	bpl.n	8003264 <__ssputs_r+0xa0>
 8003200:	4629      	mov	r1, r5
 8003202:	f000 fb6f 	bl	80038e4 <_malloc_r>
 8003206:	4606      	mov	r6, r0
 8003208:	b950      	cbnz	r0, 8003220 <__ssputs_r+0x5c>
 800320a:	230c      	movs	r3, #12
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f8ca 3000 	str.w	r3, [sl]
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800321a:	81a3      	strh	r3, [r4, #12]
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003220:	464a      	mov	r2, r9
 8003222:	6921      	ldr	r1, [r4, #16]
 8003224:	f000 face 	bl	80037c4 <memcpy>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	6126      	str	r6, [r4, #16]
 8003236:	444e      	add	r6, r9
 8003238:	6026      	str	r6, [r4, #0]
 800323a:	463e      	mov	r6, r7
 800323c:	6165      	str	r5, [r4, #20]
 800323e:	eba5 0509 	sub.w	r5, r5, r9
 8003242:	60a5      	str	r5, [r4, #8]
 8003244:	42be      	cmp	r6, r7
 8003246:	d900      	bls.n	800324a <__ssputs_r+0x86>
 8003248:	463e      	mov	r6, r7
 800324a:	4632      	mov	r2, r6
 800324c:	4641      	mov	r1, r8
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	f000 fac6 	bl	80037e0 <memmove>
 8003254:	68a3      	ldr	r3, [r4, #8]
 8003256:	2000      	movs	r0, #0
 8003258:	1b9b      	subs	r3, r3, r6
 800325a:	60a3      	str	r3, [r4, #8]
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	4433      	add	r3, r6
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	e7db      	b.n	800321c <__ssputs_r+0x58>
 8003264:	462a      	mov	r2, r5
 8003266:	f000 fbb1 	bl	80039cc <_realloc_r>
 800326a:	4606      	mov	r6, r0
 800326c:	2800      	cmp	r0, #0
 800326e:	d1e1      	bne.n	8003234 <__ssputs_r+0x70>
 8003270:	4650      	mov	r0, sl
 8003272:	6921      	ldr	r1, [r4, #16]
 8003274:	f000 face 	bl	8003814 <_free_r>
 8003278:	e7c7      	b.n	800320a <__ssputs_r+0x46>
	...

0800327c <_svfiprintf_r>:
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	4698      	mov	r8, r3
 8003282:	898b      	ldrh	r3, [r1, #12]
 8003284:	4607      	mov	r7, r0
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	460d      	mov	r5, r1
 800328a:	4614      	mov	r4, r2
 800328c:	b09d      	sub	sp, #116	; 0x74
 800328e:	d50e      	bpl.n	80032ae <_svfiprintf_r+0x32>
 8003290:	690b      	ldr	r3, [r1, #16]
 8003292:	b963      	cbnz	r3, 80032ae <_svfiprintf_r+0x32>
 8003294:	2140      	movs	r1, #64	; 0x40
 8003296:	f000 fb25 	bl	80038e4 <_malloc_r>
 800329a:	6028      	str	r0, [r5, #0]
 800329c:	6128      	str	r0, [r5, #16]
 800329e:	b920      	cbnz	r0, 80032aa <_svfiprintf_r+0x2e>
 80032a0:	230c      	movs	r3, #12
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	e0d1      	b.n	800344e <_svfiprintf_r+0x1d2>
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	616b      	str	r3, [r5, #20]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9309      	str	r3, [sp, #36]	; 0x24
 80032b2:	2320      	movs	r3, #32
 80032b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b8:	2330      	movs	r3, #48	; 0x30
 80032ba:	f04f 0901 	mov.w	r9, #1
 80032be:	f8cd 800c 	str.w	r8, [sp, #12]
 80032c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003468 <_svfiprintf_r+0x1ec>
 80032c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032ca:	4623      	mov	r3, r4
 80032cc:	469a      	mov	sl, r3
 80032ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032d2:	b10a      	cbz	r2, 80032d8 <_svfiprintf_r+0x5c>
 80032d4:	2a25      	cmp	r2, #37	; 0x25
 80032d6:	d1f9      	bne.n	80032cc <_svfiprintf_r+0x50>
 80032d8:	ebba 0b04 	subs.w	fp, sl, r4
 80032dc:	d00b      	beq.n	80032f6 <_svfiprintf_r+0x7a>
 80032de:	465b      	mov	r3, fp
 80032e0:	4622      	mov	r2, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	4638      	mov	r0, r7
 80032e6:	f7ff ff6d 	bl	80031c4 <__ssputs_r>
 80032ea:	3001      	adds	r0, #1
 80032ec:	f000 80aa 	beq.w	8003444 <_svfiprintf_r+0x1c8>
 80032f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032f2:	445a      	add	r2, fp
 80032f4:	9209      	str	r2, [sp, #36]	; 0x24
 80032f6:	f89a 3000 	ldrb.w	r3, [sl]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80a2 	beq.w	8003444 <_svfiprintf_r+0x1c8>
 8003300:	2300      	movs	r3, #0
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800330a:	f10a 0a01 	add.w	sl, sl, #1
 800330e:	9304      	str	r3, [sp, #16]
 8003310:	9307      	str	r3, [sp, #28]
 8003312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003316:	931a      	str	r3, [sp, #104]	; 0x68
 8003318:	4654      	mov	r4, sl
 800331a:	2205      	movs	r2, #5
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	4851      	ldr	r0, [pc, #324]	; (8003468 <_svfiprintf_r+0x1ec>)
 8003322:	f000 fa41 	bl	80037a8 <memchr>
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	b9d8      	cbnz	r0, 8003362 <_svfiprintf_r+0xe6>
 800332a:	06d0      	lsls	r0, r2, #27
 800332c:	bf44      	itt	mi
 800332e:	2320      	movmi	r3, #32
 8003330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003334:	0711      	lsls	r1, r2, #28
 8003336:	bf44      	itt	mi
 8003338:	232b      	movmi	r3, #43	; 0x2b
 800333a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800333e:	f89a 3000 	ldrb.w	r3, [sl]
 8003342:	2b2a      	cmp	r3, #42	; 0x2a
 8003344:	d015      	beq.n	8003372 <_svfiprintf_r+0xf6>
 8003346:	4654      	mov	r4, sl
 8003348:	2000      	movs	r0, #0
 800334a:	f04f 0c0a 	mov.w	ip, #10
 800334e:	9a07      	ldr	r2, [sp, #28]
 8003350:	4621      	mov	r1, r4
 8003352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003356:	3b30      	subs	r3, #48	; 0x30
 8003358:	2b09      	cmp	r3, #9
 800335a:	d94e      	bls.n	80033fa <_svfiprintf_r+0x17e>
 800335c:	b1b0      	cbz	r0, 800338c <_svfiprintf_r+0x110>
 800335e:	9207      	str	r2, [sp, #28]
 8003360:	e014      	b.n	800338c <_svfiprintf_r+0x110>
 8003362:	eba0 0308 	sub.w	r3, r0, r8
 8003366:	fa09 f303 	lsl.w	r3, r9, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	46a2      	mov	sl, r4
 800336e:	9304      	str	r3, [sp, #16]
 8003370:	e7d2      	b.n	8003318 <_svfiprintf_r+0x9c>
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	1d19      	adds	r1, r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	9103      	str	r1, [sp, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	bfbb      	ittet	lt
 800337e:	425b      	neglt	r3, r3
 8003380:	f042 0202 	orrlt.w	r2, r2, #2
 8003384:	9307      	strge	r3, [sp, #28]
 8003386:	9307      	strlt	r3, [sp, #28]
 8003388:	bfb8      	it	lt
 800338a:	9204      	strlt	r2, [sp, #16]
 800338c:	7823      	ldrb	r3, [r4, #0]
 800338e:	2b2e      	cmp	r3, #46	; 0x2e
 8003390:	d10c      	bne.n	80033ac <_svfiprintf_r+0x130>
 8003392:	7863      	ldrb	r3, [r4, #1]
 8003394:	2b2a      	cmp	r3, #42	; 0x2a
 8003396:	d135      	bne.n	8003404 <_svfiprintf_r+0x188>
 8003398:	9b03      	ldr	r3, [sp, #12]
 800339a:	3402      	adds	r4, #2
 800339c:	1d1a      	adds	r2, r3, #4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	9203      	str	r2, [sp, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bfb8      	it	lt
 80033a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80033aa:	9305      	str	r3, [sp, #20]
 80033ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800346c <_svfiprintf_r+0x1f0>
 80033b0:	2203      	movs	r2, #3
 80033b2:	4650      	mov	r0, sl
 80033b4:	7821      	ldrb	r1, [r4, #0]
 80033b6:	f000 f9f7 	bl	80037a8 <memchr>
 80033ba:	b140      	cbz	r0, 80033ce <_svfiprintf_r+0x152>
 80033bc:	2340      	movs	r3, #64	; 0x40
 80033be:	eba0 000a 	sub.w	r0, r0, sl
 80033c2:	fa03 f000 	lsl.w	r0, r3, r0
 80033c6:	9b04      	ldr	r3, [sp, #16]
 80033c8:	3401      	adds	r4, #1
 80033ca:	4303      	orrs	r3, r0
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d2:	2206      	movs	r2, #6
 80033d4:	4826      	ldr	r0, [pc, #152]	; (8003470 <_svfiprintf_r+0x1f4>)
 80033d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033da:	f000 f9e5 	bl	80037a8 <memchr>
 80033de:	2800      	cmp	r0, #0
 80033e0:	d038      	beq.n	8003454 <_svfiprintf_r+0x1d8>
 80033e2:	4b24      	ldr	r3, [pc, #144]	; (8003474 <_svfiprintf_r+0x1f8>)
 80033e4:	bb1b      	cbnz	r3, 800342e <_svfiprintf_r+0x1b2>
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	3307      	adds	r3, #7
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	3308      	adds	r3, #8
 80033f0:	9303      	str	r3, [sp, #12]
 80033f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f4:	4433      	add	r3, r6
 80033f6:	9309      	str	r3, [sp, #36]	; 0x24
 80033f8:	e767      	b.n	80032ca <_svfiprintf_r+0x4e>
 80033fa:	460c      	mov	r4, r1
 80033fc:	2001      	movs	r0, #1
 80033fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003402:	e7a5      	b.n	8003350 <_svfiprintf_r+0xd4>
 8003404:	2300      	movs	r3, #0
 8003406:	f04f 0c0a 	mov.w	ip, #10
 800340a:	4619      	mov	r1, r3
 800340c:	3401      	adds	r4, #1
 800340e:	9305      	str	r3, [sp, #20]
 8003410:	4620      	mov	r0, r4
 8003412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003416:	3a30      	subs	r2, #48	; 0x30
 8003418:	2a09      	cmp	r2, #9
 800341a:	d903      	bls.n	8003424 <_svfiprintf_r+0x1a8>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0c5      	beq.n	80033ac <_svfiprintf_r+0x130>
 8003420:	9105      	str	r1, [sp, #20]
 8003422:	e7c3      	b.n	80033ac <_svfiprintf_r+0x130>
 8003424:	4604      	mov	r4, r0
 8003426:	2301      	movs	r3, #1
 8003428:	fb0c 2101 	mla	r1, ip, r1, r2
 800342c:	e7f0      	b.n	8003410 <_svfiprintf_r+0x194>
 800342e:	ab03      	add	r3, sp, #12
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	462a      	mov	r2, r5
 8003434:	4638      	mov	r0, r7
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <_svfiprintf_r+0x1fc>)
 8003438:	a904      	add	r1, sp, #16
 800343a:	f3af 8000 	nop.w
 800343e:	1c42      	adds	r2, r0, #1
 8003440:	4606      	mov	r6, r0
 8003442:	d1d6      	bne.n	80033f2 <_svfiprintf_r+0x176>
 8003444:	89ab      	ldrh	r3, [r5, #12]
 8003446:	065b      	lsls	r3, r3, #25
 8003448:	f53f af2c 	bmi.w	80032a4 <_svfiprintf_r+0x28>
 800344c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800344e:	b01d      	add	sp, #116	; 0x74
 8003450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003454:	ab03      	add	r3, sp, #12
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	462a      	mov	r2, r5
 800345a:	4638      	mov	r0, r7
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <_svfiprintf_r+0x1fc>)
 800345e:	a904      	add	r1, sp, #16
 8003460:	f000 f87c 	bl	800355c <_printf_i>
 8003464:	e7eb      	b.n	800343e <_svfiprintf_r+0x1c2>
 8003466:	bf00      	nop
 8003468:	08003aca 	.word	0x08003aca
 800346c:	08003ad0 	.word	0x08003ad0
 8003470:	08003ad4 	.word	0x08003ad4
 8003474:	00000000 	.word	0x00000000
 8003478:	080031c5 	.word	0x080031c5

0800347c <_printf_common>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	4616      	mov	r6, r2
 8003482:	4699      	mov	r9, r3
 8003484:	688a      	ldr	r2, [r1, #8]
 8003486:	690b      	ldr	r3, [r1, #16]
 8003488:	4607      	mov	r7, r0
 800348a:	4293      	cmp	r3, r2
 800348c:	bfb8      	it	lt
 800348e:	4613      	movlt	r3, r2
 8003490:	6033      	str	r3, [r6, #0]
 8003492:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003496:	460c      	mov	r4, r1
 8003498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800349c:	b10a      	cbz	r2, 80034a2 <_printf_common+0x26>
 800349e:	3301      	adds	r3, #1
 80034a0:	6033      	str	r3, [r6, #0]
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	0699      	lsls	r1, r3, #26
 80034a6:	bf42      	ittt	mi
 80034a8:	6833      	ldrmi	r3, [r6, #0]
 80034aa:	3302      	addmi	r3, #2
 80034ac:	6033      	strmi	r3, [r6, #0]
 80034ae:	6825      	ldr	r5, [r4, #0]
 80034b0:	f015 0506 	ands.w	r5, r5, #6
 80034b4:	d106      	bne.n	80034c4 <_printf_common+0x48>
 80034b6:	f104 0a19 	add.w	sl, r4, #25
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	6832      	ldr	r2, [r6, #0]
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	42ab      	cmp	r3, r5
 80034c2:	dc28      	bgt.n	8003516 <_printf_common+0x9a>
 80034c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034c8:	1e13      	subs	r3, r2, #0
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	bf18      	it	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	0692      	lsls	r2, r2, #26
 80034d2:	d42d      	bmi.n	8003530 <_printf_common+0xb4>
 80034d4:	4649      	mov	r1, r9
 80034d6:	4638      	mov	r0, r7
 80034d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034dc:	47c0      	blx	r8
 80034de:	3001      	adds	r0, #1
 80034e0:	d020      	beq.n	8003524 <_printf_common+0xa8>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	68e5      	ldr	r5, [r4, #12]
 80034e6:	f003 0306 	and.w	r3, r3, #6
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf18      	it	ne
 80034ee:	2500      	movne	r5, #0
 80034f0:	6832      	ldr	r2, [r6, #0]
 80034f2:	f04f 0600 	mov.w	r6, #0
 80034f6:	68a3      	ldr	r3, [r4, #8]
 80034f8:	bf08      	it	eq
 80034fa:	1aad      	subeq	r5, r5, r2
 80034fc:	6922      	ldr	r2, [r4, #16]
 80034fe:	bf08      	it	eq
 8003500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003504:	4293      	cmp	r3, r2
 8003506:	bfc4      	itt	gt
 8003508:	1a9b      	subgt	r3, r3, r2
 800350a:	18ed      	addgt	r5, r5, r3
 800350c:	341a      	adds	r4, #26
 800350e:	42b5      	cmp	r5, r6
 8003510:	d11a      	bne.n	8003548 <_printf_common+0xcc>
 8003512:	2000      	movs	r0, #0
 8003514:	e008      	b.n	8003528 <_printf_common+0xac>
 8003516:	2301      	movs	r3, #1
 8003518:	4652      	mov	r2, sl
 800351a:	4649      	mov	r1, r9
 800351c:	4638      	mov	r0, r7
 800351e:	47c0      	blx	r8
 8003520:	3001      	adds	r0, #1
 8003522:	d103      	bne.n	800352c <_printf_common+0xb0>
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352c:	3501      	adds	r5, #1
 800352e:	e7c4      	b.n	80034ba <_printf_common+0x3e>
 8003530:	2030      	movs	r0, #48	; 0x30
 8003532:	18e1      	adds	r1, r4, r3
 8003534:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800353e:	4422      	add	r2, r4
 8003540:	3302      	adds	r3, #2
 8003542:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003546:	e7c5      	b.n	80034d4 <_printf_common+0x58>
 8003548:	2301      	movs	r3, #1
 800354a:	4622      	mov	r2, r4
 800354c:	4649      	mov	r1, r9
 800354e:	4638      	mov	r0, r7
 8003550:	47c0      	blx	r8
 8003552:	3001      	adds	r0, #1
 8003554:	d0e6      	beq.n	8003524 <_printf_common+0xa8>
 8003556:	3601      	adds	r6, #1
 8003558:	e7d9      	b.n	800350e <_printf_common+0x92>
	...

0800355c <_printf_i>:
 800355c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003560:	7e0f      	ldrb	r7, [r1, #24]
 8003562:	4691      	mov	r9, r2
 8003564:	2f78      	cmp	r7, #120	; 0x78
 8003566:	4680      	mov	r8, r0
 8003568:	460c      	mov	r4, r1
 800356a:	469a      	mov	sl, r3
 800356c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800356e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003572:	d807      	bhi.n	8003584 <_printf_i+0x28>
 8003574:	2f62      	cmp	r7, #98	; 0x62
 8003576:	d80a      	bhi.n	800358e <_printf_i+0x32>
 8003578:	2f00      	cmp	r7, #0
 800357a:	f000 80d9 	beq.w	8003730 <_printf_i+0x1d4>
 800357e:	2f58      	cmp	r7, #88	; 0x58
 8003580:	f000 80a4 	beq.w	80036cc <_printf_i+0x170>
 8003584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800358c:	e03a      	b.n	8003604 <_printf_i+0xa8>
 800358e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003592:	2b15      	cmp	r3, #21
 8003594:	d8f6      	bhi.n	8003584 <_printf_i+0x28>
 8003596:	a101      	add	r1, pc, #4	; (adr r1, 800359c <_printf_i+0x40>)
 8003598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800359c:	080035f5 	.word	0x080035f5
 80035a0:	08003609 	.word	0x08003609
 80035a4:	08003585 	.word	0x08003585
 80035a8:	08003585 	.word	0x08003585
 80035ac:	08003585 	.word	0x08003585
 80035b0:	08003585 	.word	0x08003585
 80035b4:	08003609 	.word	0x08003609
 80035b8:	08003585 	.word	0x08003585
 80035bc:	08003585 	.word	0x08003585
 80035c0:	08003585 	.word	0x08003585
 80035c4:	08003585 	.word	0x08003585
 80035c8:	08003717 	.word	0x08003717
 80035cc:	08003639 	.word	0x08003639
 80035d0:	080036f9 	.word	0x080036f9
 80035d4:	08003585 	.word	0x08003585
 80035d8:	08003585 	.word	0x08003585
 80035dc:	08003739 	.word	0x08003739
 80035e0:	08003585 	.word	0x08003585
 80035e4:	08003639 	.word	0x08003639
 80035e8:	08003585 	.word	0x08003585
 80035ec:	08003585 	.word	0x08003585
 80035f0:	08003701 	.word	0x08003701
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	1d1a      	adds	r2, r3, #4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	602a      	str	r2, [r5, #0]
 80035fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003604:	2301      	movs	r3, #1
 8003606:	e0a4      	b.n	8003752 <_printf_i+0x1f6>
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	6829      	ldr	r1, [r5, #0]
 800360c:	0606      	lsls	r6, r0, #24
 800360e:	f101 0304 	add.w	r3, r1, #4
 8003612:	d50a      	bpl.n	800362a <_printf_i+0xce>
 8003614:	680e      	ldr	r6, [r1, #0]
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	2e00      	cmp	r6, #0
 800361a:	da03      	bge.n	8003624 <_printf_i+0xc8>
 800361c:	232d      	movs	r3, #45	; 0x2d
 800361e:	4276      	negs	r6, r6
 8003620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003624:	230a      	movs	r3, #10
 8003626:	485e      	ldr	r0, [pc, #376]	; (80037a0 <_printf_i+0x244>)
 8003628:	e019      	b.n	800365e <_printf_i+0x102>
 800362a:	680e      	ldr	r6, [r1, #0]
 800362c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003630:	602b      	str	r3, [r5, #0]
 8003632:	bf18      	it	ne
 8003634:	b236      	sxthne	r6, r6
 8003636:	e7ef      	b.n	8003618 <_printf_i+0xbc>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	1d19      	adds	r1, r3, #4
 800363e:	6029      	str	r1, [r5, #0]
 8003640:	0601      	lsls	r1, r0, #24
 8003642:	d501      	bpl.n	8003648 <_printf_i+0xec>
 8003644:	681e      	ldr	r6, [r3, #0]
 8003646:	e002      	b.n	800364e <_printf_i+0xf2>
 8003648:	0646      	lsls	r6, r0, #25
 800364a:	d5fb      	bpl.n	8003644 <_printf_i+0xe8>
 800364c:	881e      	ldrh	r6, [r3, #0]
 800364e:	2f6f      	cmp	r7, #111	; 0x6f
 8003650:	bf0c      	ite	eq
 8003652:	2308      	moveq	r3, #8
 8003654:	230a      	movne	r3, #10
 8003656:	4852      	ldr	r0, [pc, #328]	; (80037a0 <_printf_i+0x244>)
 8003658:	2100      	movs	r1, #0
 800365a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800365e:	6865      	ldr	r5, [r4, #4]
 8003660:	2d00      	cmp	r5, #0
 8003662:	bfa8      	it	ge
 8003664:	6821      	ldrge	r1, [r4, #0]
 8003666:	60a5      	str	r5, [r4, #8]
 8003668:	bfa4      	itt	ge
 800366a:	f021 0104 	bicge.w	r1, r1, #4
 800366e:	6021      	strge	r1, [r4, #0]
 8003670:	b90e      	cbnz	r6, 8003676 <_printf_i+0x11a>
 8003672:	2d00      	cmp	r5, #0
 8003674:	d04d      	beq.n	8003712 <_printf_i+0x1b6>
 8003676:	4615      	mov	r5, r2
 8003678:	fbb6 f1f3 	udiv	r1, r6, r3
 800367c:	fb03 6711 	mls	r7, r3, r1, r6
 8003680:	5dc7      	ldrb	r7, [r0, r7]
 8003682:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003686:	4637      	mov	r7, r6
 8003688:	42bb      	cmp	r3, r7
 800368a:	460e      	mov	r6, r1
 800368c:	d9f4      	bls.n	8003678 <_printf_i+0x11c>
 800368e:	2b08      	cmp	r3, #8
 8003690:	d10b      	bne.n	80036aa <_printf_i+0x14e>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	07de      	lsls	r6, r3, #31
 8003696:	d508      	bpl.n	80036aa <_printf_i+0x14e>
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	6861      	ldr	r1, [r4, #4]
 800369c:	4299      	cmp	r1, r3
 800369e:	bfde      	ittt	le
 80036a0:	2330      	movle	r3, #48	; 0x30
 80036a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036aa:	1b52      	subs	r2, r2, r5
 80036ac:	6122      	str	r2, [r4, #16]
 80036ae:	464b      	mov	r3, r9
 80036b0:	4621      	mov	r1, r4
 80036b2:	4640      	mov	r0, r8
 80036b4:	f8cd a000 	str.w	sl, [sp]
 80036b8:	aa03      	add	r2, sp, #12
 80036ba:	f7ff fedf 	bl	800347c <_printf_common>
 80036be:	3001      	adds	r0, #1
 80036c0:	d14c      	bne.n	800375c <_printf_i+0x200>
 80036c2:	f04f 30ff 	mov.w	r0, #4294967295
 80036c6:	b004      	add	sp, #16
 80036c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036cc:	4834      	ldr	r0, [pc, #208]	; (80037a0 <_printf_i+0x244>)
 80036ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036d2:	6829      	ldr	r1, [r5, #0]
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80036da:	6029      	str	r1, [r5, #0]
 80036dc:	061d      	lsls	r5, r3, #24
 80036de:	d514      	bpl.n	800370a <_printf_i+0x1ae>
 80036e0:	07df      	lsls	r7, r3, #31
 80036e2:	bf44      	itt	mi
 80036e4:	f043 0320 	orrmi.w	r3, r3, #32
 80036e8:	6023      	strmi	r3, [r4, #0]
 80036ea:	b91e      	cbnz	r6, 80036f4 <_printf_i+0x198>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	f023 0320 	bic.w	r3, r3, #32
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	2310      	movs	r3, #16
 80036f6:	e7af      	b.n	8003658 <_printf_i+0xfc>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	f043 0320 	orr.w	r3, r3, #32
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	2378      	movs	r3, #120	; 0x78
 8003702:	4828      	ldr	r0, [pc, #160]	; (80037a4 <_printf_i+0x248>)
 8003704:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003708:	e7e3      	b.n	80036d2 <_printf_i+0x176>
 800370a:	0659      	lsls	r1, r3, #25
 800370c:	bf48      	it	mi
 800370e:	b2b6      	uxthmi	r6, r6
 8003710:	e7e6      	b.n	80036e0 <_printf_i+0x184>
 8003712:	4615      	mov	r5, r2
 8003714:	e7bb      	b.n	800368e <_printf_i+0x132>
 8003716:	682b      	ldr	r3, [r5, #0]
 8003718:	6826      	ldr	r6, [r4, #0]
 800371a:	1d18      	adds	r0, r3, #4
 800371c:	6961      	ldr	r1, [r4, #20]
 800371e:	6028      	str	r0, [r5, #0]
 8003720:	0635      	lsls	r5, r6, #24
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	d501      	bpl.n	800372a <_printf_i+0x1ce>
 8003726:	6019      	str	r1, [r3, #0]
 8003728:	e002      	b.n	8003730 <_printf_i+0x1d4>
 800372a:	0670      	lsls	r0, r6, #25
 800372c:	d5fb      	bpl.n	8003726 <_printf_i+0x1ca>
 800372e:	8019      	strh	r1, [r3, #0]
 8003730:	2300      	movs	r3, #0
 8003732:	4615      	mov	r5, r2
 8003734:	6123      	str	r3, [r4, #16]
 8003736:	e7ba      	b.n	80036ae <_printf_i+0x152>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	2100      	movs	r1, #0
 800373c:	1d1a      	adds	r2, r3, #4
 800373e:	602a      	str	r2, [r5, #0]
 8003740:	681d      	ldr	r5, [r3, #0]
 8003742:	6862      	ldr	r2, [r4, #4]
 8003744:	4628      	mov	r0, r5
 8003746:	f000 f82f 	bl	80037a8 <memchr>
 800374a:	b108      	cbz	r0, 8003750 <_printf_i+0x1f4>
 800374c:	1b40      	subs	r0, r0, r5
 800374e:	6060      	str	r0, [r4, #4]
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	6123      	str	r3, [r4, #16]
 8003754:	2300      	movs	r3, #0
 8003756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800375a:	e7a8      	b.n	80036ae <_printf_i+0x152>
 800375c:	462a      	mov	r2, r5
 800375e:	4649      	mov	r1, r9
 8003760:	4640      	mov	r0, r8
 8003762:	6923      	ldr	r3, [r4, #16]
 8003764:	47d0      	blx	sl
 8003766:	3001      	adds	r0, #1
 8003768:	d0ab      	beq.n	80036c2 <_printf_i+0x166>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	079b      	lsls	r3, r3, #30
 800376e:	d413      	bmi.n	8003798 <_printf_i+0x23c>
 8003770:	68e0      	ldr	r0, [r4, #12]
 8003772:	9b03      	ldr	r3, [sp, #12]
 8003774:	4298      	cmp	r0, r3
 8003776:	bfb8      	it	lt
 8003778:	4618      	movlt	r0, r3
 800377a:	e7a4      	b.n	80036c6 <_printf_i+0x16a>
 800377c:	2301      	movs	r3, #1
 800377e:	4632      	mov	r2, r6
 8003780:	4649      	mov	r1, r9
 8003782:	4640      	mov	r0, r8
 8003784:	47d0      	blx	sl
 8003786:	3001      	adds	r0, #1
 8003788:	d09b      	beq.n	80036c2 <_printf_i+0x166>
 800378a:	3501      	adds	r5, #1
 800378c:	68e3      	ldr	r3, [r4, #12]
 800378e:	9903      	ldr	r1, [sp, #12]
 8003790:	1a5b      	subs	r3, r3, r1
 8003792:	42ab      	cmp	r3, r5
 8003794:	dcf2      	bgt.n	800377c <_printf_i+0x220>
 8003796:	e7eb      	b.n	8003770 <_printf_i+0x214>
 8003798:	2500      	movs	r5, #0
 800379a:	f104 0619 	add.w	r6, r4, #25
 800379e:	e7f5      	b.n	800378c <_printf_i+0x230>
 80037a0:	08003adb 	.word	0x08003adb
 80037a4:	08003aec 	.word	0x08003aec

080037a8 <memchr>:
 80037a8:	4603      	mov	r3, r0
 80037aa:	b510      	push	{r4, lr}
 80037ac:	b2c9      	uxtb	r1, r1
 80037ae:	4402      	add	r2, r0
 80037b0:	4293      	cmp	r3, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	d101      	bne.n	80037ba <memchr+0x12>
 80037b6:	2000      	movs	r0, #0
 80037b8:	e003      	b.n	80037c2 <memchr+0x1a>
 80037ba:	7804      	ldrb	r4, [r0, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	428c      	cmp	r4, r1
 80037c0:	d1f6      	bne.n	80037b0 <memchr+0x8>
 80037c2:	bd10      	pop	{r4, pc}

080037c4 <memcpy>:
 80037c4:	440a      	add	r2, r1
 80037c6:	4291      	cmp	r1, r2
 80037c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037cc:	d100      	bne.n	80037d0 <memcpy+0xc>
 80037ce:	4770      	bx	lr
 80037d0:	b510      	push	{r4, lr}
 80037d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037d6:	4291      	cmp	r1, r2
 80037d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037dc:	d1f9      	bne.n	80037d2 <memcpy+0xe>
 80037de:	bd10      	pop	{r4, pc}

080037e0 <memmove>:
 80037e0:	4288      	cmp	r0, r1
 80037e2:	b510      	push	{r4, lr}
 80037e4:	eb01 0402 	add.w	r4, r1, r2
 80037e8:	d902      	bls.n	80037f0 <memmove+0x10>
 80037ea:	4284      	cmp	r4, r0
 80037ec:	4623      	mov	r3, r4
 80037ee:	d807      	bhi.n	8003800 <memmove+0x20>
 80037f0:	1e43      	subs	r3, r0, #1
 80037f2:	42a1      	cmp	r1, r4
 80037f4:	d008      	beq.n	8003808 <memmove+0x28>
 80037f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037fe:	e7f8      	b.n	80037f2 <memmove+0x12>
 8003800:	4601      	mov	r1, r0
 8003802:	4402      	add	r2, r0
 8003804:	428a      	cmp	r2, r1
 8003806:	d100      	bne.n	800380a <memmove+0x2a>
 8003808:	bd10      	pop	{r4, pc}
 800380a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800380e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003812:	e7f7      	b.n	8003804 <memmove+0x24>

08003814 <_free_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	4605      	mov	r5, r0
 8003818:	2900      	cmp	r1, #0
 800381a:	d040      	beq.n	800389e <_free_r+0x8a>
 800381c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003820:	1f0c      	subs	r4, r1, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	bfb8      	it	lt
 8003826:	18e4      	addlt	r4, r4, r3
 8003828:	f000 f910 	bl	8003a4c <__malloc_lock>
 800382c:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <_free_r+0x8c>)
 800382e:	6813      	ldr	r3, [r2, #0]
 8003830:	b933      	cbnz	r3, 8003840 <_free_r+0x2c>
 8003832:	6063      	str	r3, [r4, #4]
 8003834:	6014      	str	r4, [r2, #0]
 8003836:	4628      	mov	r0, r5
 8003838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800383c:	f000 b90c 	b.w	8003a58 <__malloc_unlock>
 8003840:	42a3      	cmp	r3, r4
 8003842:	d908      	bls.n	8003856 <_free_r+0x42>
 8003844:	6820      	ldr	r0, [r4, #0]
 8003846:	1821      	adds	r1, r4, r0
 8003848:	428b      	cmp	r3, r1
 800384a:	bf01      	itttt	eq
 800384c:	6819      	ldreq	r1, [r3, #0]
 800384e:	685b      	ldreq	r3, [r3, #4]
 8003850:	1809      	addeq	r1, r1, r0
 8003852:	6021      	streq	r1, [r4, #0]
 8003854:	e7ed      	b.n	8003832 <_free_r+0x1e>
 8003856:	461a      	mov	r2, r3
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	b10b      	cbz	r3, 8003860 <_free_r+0x4c>
 800385c:	42a3      	cmp	r3, r4
 800385e:	d9fa      	bls.n	8003856 <_free_r+0x42>
 8003860:	6811      	ldr	r1, [r2, #0]
 8003862:	1850      	adds	r0, r2, r1
 8003864:	42a0      	cmp	r0, r4
 8003866:	d10b      	bne.n	8003880 <_free_r+0x6c>
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	4401      	add	r1, r0
 800386c:	1850      	adds	r0, r2, r1
 800386e:	4283      	cmp	r3, r0
 8003870:	6011      	str	r1, [r2, #0]
 8003872:	d1e0      	bne.n	8003836 <_free_r+0x22>
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4401      	add	r1, r0
 800387a:	6011      	str	r1, [r2, #0]
 800387c:	6053      	str	r3, [r2, #4]
 800387e:	e7da      	b.n	8003836 <_free_r+0x22>
 8003880:	d902      	bls.n	8003888 <_free_r+0x74>
 8003882:	230c      	movs	r3, #12
 8003884:	602b      	str	r3, [r5, #0]
 8003886:	e7d6      	b.n	8003836 <_free_r+0x22>
 8003888:	6820      	ldr	r0, [r4, #0]
 800388a:	1821      	adds	r1, r4, r0
 800388c:	428b      	cmp	r3, r1
 800388e:	bf01      	itttt	eq
 8003890:	6819      	ldreq	r1, [r3, #0]
 8003892:	685b      	ldreq	r3, [r3, #4]
 8003894:	1809      	addeq	r1, r1, r0
 8003896:	6021      	streq	r1, [r4, #0]
 8003898:	6063      	str	r3, [r4, #4]
 800389a:	6054      	str	r4, [r2, #4]
 800389c:	e7cb      	b.n	8003836 <_free_r+0x22>
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	20000158 	.word	0x20000158

080038a4 <sbrk_aligned>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	4e0e      	ldr	r6, [pc, #56]	; (80038e0 <sbrk_aligned+0x3c>)
 80038a8:	460c      	mov	r4, r1
 80038aa:	6831      	ldr	r1, [r6, #0]
 80038ac:	4605      	mov	r5, r0
 80038ae:	b911      	cbnz	r1, 80038b6 <sbrk_aligned+0x12>
 80038b0:	f000 f8bc 	bl	8003a2c <_sbrk_r>
 80038b4:	6030      	str	r0, [r6, #0]
 80038b6:	4621      	mov	r1, r4
 80038b8:	4628      	mov	r0, r5
 80038ba:	f000 f8b7 	bl	8003a2c <_sbrk_r>
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	d00a      	beq.n	80038d8 <sbrk_aligned+0x34>
 80038c2:	1cc4      	adds	r4, r0, #3
 80038c4:	f024 0403 	bic.w	r4, r4, #3
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d007      	beq.n	80038dc <sbrk_aligned+0x38>
 80038cc:	1a21      	subs	r1, r4, r0
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 f8ac 	bl	8003a2c <_sbrk_r>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d101      	bne.n	80038dc <sbrk_aligned+0x38>
 80038d8:	f04f 34ff 	mov.w	r4, #4294967295
 80038dc:	4620      	mov	r0, r4
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	2000015c 	.word	0x2000015c

080038e4 <_malloc_r>:
 80038e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e8:	1ccd      	adds	r5, r1, #3
 80038ea:	f025 0503 	bic.w	r5, r5, #3
 80038ee:	3508      	adds	r5, #8
 80038f0:	2d0c      	cmp	r5, #12
 80038f2:	bf38      	it	cc
 80038f4:	250c      	movcc	r5, #12
 80038f6:	2d00      	cmp	r5, #0
 80038f8:	4607      	mov	r7, r0
 80038fa:	db01      	blt.n	8003900 <_malloc_r+0x1c>
 80038fc:	42a9      	cmp	r1, r5
 80038fe:	d905      	bls.n	800390c <_malloc_r+0x28>
 8003900:	230c      	movs	r3, #12
 8003902:	2600      	movs	r6, #0
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4630      	mov	r0, r6
 8003908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800390c:	4e2e      	ldr	r6, [pc, #184]	; (80039c8 <_malloc_r+0xe4>)
 800390e:	f000 f89d 	bl	8003a4c <__malloc_lock>
 8003912:	6833      	ldr	r3, [r6, #0]
 8003914:	461c      	mov	r4, r3
 8003916:	bb34      	cbnz	r4, 8003966 <_malloc_r+0x82>
 8003918:	4629      	mov	r1, r5
 800391a:	4638      	mov	r0, r7
 800391c:	f7ff ffc2 	bl	80038a4 <sbrk_aligned>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	4604      	mov	r4, r0
 8003924:	d14d      	bne.n	80039c2 <_malloc_r+0xde>
 8003926:	6834      	ldr	r4, [r6, #0]
 8003928:	4626      	mov	r6, r4
 800392a:	2e00      	cmp	r6, #0
 800392c:	d140      	bne.n	80039b0 <_malloc_r+0xcc>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	4631      	mov	r1, r6
 8003932:	4638      	mov	r0, r7
 8003934:	eb04 0803 	add.w	r8, r4, r3
 8003938:	f000 f878 	bl	8003a2c <_sbrk_r>
 800393c:	4580      	cmp	r8, r0
 800393e:	d13a      	bne.n	80039b6 <_malloc_r+0xd2>
 8003940:	6821      	ldr	r1, [r4, #0]
 8003942:	3503      	adds	r5, #3
 8003944:	1a6d      	subs	r5, r5, r1
 8003946:	f025 0503 	bic.w	r5, r5, #3
 800394a:	3508      	adds	r5, #8
 800394c:	2d0c      	cmp	r5, #12
 800394e:	bf38      	it	cc
 8003950:	250c      	movcc	r5, #12
 8003952:	4638      	mov	r0, r7
 8003954:	4629      	mov	r1, r5
 8003956:	f7ff ffa5 	bl	80038a4 <sbrk_aligned>
 800395a:	3001      	adds	r0, #1
 800395c:	d02b      	beq.n	80039b6 <_malloc_r+0xd2>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	442b      	add	r3, r5
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	e00e      	b.n	8003984 <_malloc_r+0xa0>
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	1b52      	subs	r2, r2, r5
 800396a:	d41e      	bmi.n	80039aa <_malloc_r+0xc6>
 800396c:	2a0b      	cmp	r2, #11
 800396e:	d916      	bls.n	800399e <_malloc_r+0xba>
 8003970:	1961      	adds	r1, r4, r5
 8003972:	42a3      	cmp	r3, r4
 8003974:	6025      	str	r5, [r4, #0]
 8003976:	bf18      	it	ne
 8003978:	6059      	strne	r1, [r3, #4]
 800397a:	6863      	ldr	r3, [r4, #4]
 800397c:	bf08      	it	eq
 800397e:	6031      	streq	r1, [r6, #0]
 8003980:	5162      	str	r2, [r4, r5]
 8003982:	604b      	str	r3, [r1, #4]
 8003984:	4638      	mov	r0, r7
 8003986:	f104 060b 	add.w	r6, r4, #11
 800398a:	f000 f865 	bl	8003a58 <__malloc_unlock>
 800398e:	f026 0607 	bic.w	r6, r6, #7
 8003992:	1d23      	adds	r3, r4, #4
 8003994:	1af2      	subs	r2, r6, r3
 8003996:	d0b6      	beq.n	8003906 <_malloc_r+0x22>
 8003998:	1b9b      	subs	r3, r3, r6
 800399a:	50a3      	str	r3, [r4, r2]
 800399c:	e7b3      	b.n	8003906 <_malloc_r+0x22>
 800399e:	6862      	ldr	r2, [r4, #4]
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	bf0c      	ite	eq
 80039a4:	6032      	streq	r2, [r6, #0]
 80039a6:	605a      	strne	r2, [r3, #4]
 80039a8:	e7ec      	b.n	8003984 <_malloc_r+0xa0>
 80039aa:	4623      	mov	r3, r4
 80039ac:	6864      	ldr	r4, [r4, #4]
 80039ae:	e7b2      	b.n	8003916 <_malloc_r+0x32>
 80039b0:	4634      	mov	r4, r6
 80039b2:	6876      	ldr	r6, [r6, #4]
 80039b4:	e7b9      	b.n	800392a <_malloc_r+0x46>
 80039b6:	230c      	movs	r3, #12
 80039b8:	4638      	mov	r0, r7
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	f000 f84c 	bl	8003a58 <__malloc_unlock>
 80039c0:	e7a1      	b.n	8003906 <_malloc_r+0x22>
 80039c2:	6025      	str	r5, [r4, #0]
 80039c4:	e7de      	b.n	8003984 <_malloc_r+0xa0>
 80039c6:	bf00      	nop
 80039c8:	20000158 	.word	0x20000158

080039cc <_realloc_r>:
 80039cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d0:	4680      	mov	r8, r0
 80039d2:	4614      	mov	r4, r2
 80039d4:	460e      	mov	r6, r1
 80039d6:	b921      	cbnz	r1, 80039e2 <_realloc_r+0x16>
 80039d8:	4611      	mov	r1, r2
 80039da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039de:	f7ff bf81 	b.w	80038e4 <_malloc_r>
 80039e2:	b92a      	cbnz	r2, 80039f0 <_realloc_r+0x24>
 80039e4:	f7ff ff16 	bl	8003814 <_free_r>
 80039e8:	4625      	mov	r5, r4
 80039ea:	4628      	mov	r0, r5
 80039ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039f0:	f000 f838 	bl	8003a64 <_malloc_usable_size_r>
 80039f4:	4284      	cmp	r4, r0
 80039f6:	4607      	mov	r7, r0
 80039f8:	d802      	bhi.n	8003a00 <_realloc_r+0x34>
 80039fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039fe:	d812      	bhi.n	8003a26 <_realloc_r+0x5a>
 8003a00:	4621      	mov	r1, r4
 8003a02:	4640      	mov	r0, r8
 8003a04:	f7ff ff6e 	bl	80038e4 <_malloc_r>
 8003a08:	4605      	mov	r5, r0
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d0ed      	beq.n	80039ea <_realloc_r+0x1e>
 8003a0e:	42bc      	cmp	r4, r7
 8003a10:	4622      	mov	r2, r4
 8003a12:	4631      	mov	r1, r6
 8003a14:	bf28      	it	cs
 8003a16:	463a      	movcs	r2, r7
 8003a18:	f7ff fed4 	bl	80037c4 <memcpy>
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	4640      	mov	r0, r8
 8003a20:	f7ff fef8 	bl	8003814 <_free_r>
 8003a24:	e7e1      	b.n	80039ea <_realloc_r+0x1e>
 8003a26:	4635      	mov	r5, r6
 8003a28:	e7df      	b.n	80039ea <_realloc_r+0x1e>
	...

08003a2c <_sbrk_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	2300      	movs	r3, #0
 8003a30:	4d05      	ldr	r5, [pc, #20]	; (8003a48 <_sbrk_r+0x1c>)
 8003a32:	4604      	mov	r4, r0
 8003a34:	4608      	mov	r0, r1
 8003a36:	602b      	str	r3, [r5, #0]
 8003a38:	f7fd fa72 	bl	8000f20 <_sbrk>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d102      	bne.n	8003a46 <_sbrk_r+0x1a>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	b103      	cbz	r3, 8003a46 <_sbrk_r+0x1a>
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	20000160 	.word	0x20000160

08003a4c <__malloc_lock>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	; (8003a54 <__malloc_lock+0x8>)
 8003a4e:	f000 b811 	b.w	8003a74 <__retarget_lock_acquire_recursive>
 8003a52:	bf00      	nop
 8003a54:	20000164 	.word	0x20000164

08003a58 <__malloc_unlock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	; (8003a60 <__malloc_unlock+0x8>)
 8003a5a:	f000 b80c 	b.w	8003a76 <__retarget_lock_release_recursive>
 8003a5e:	bf00      	nop
 8003a60:	20000164 	.word	0x20000164

08003a64 <_malloc_usable_size_r>:
 8003a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a68:	1f18      	subs	r0, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bfbc      	itt	lt
 8003a6e:	580b      	ldrlt	r3, [r1, r0]
 8003a70:	18c0      	addlt	r0, r0, r3
 8003a72:	4770      	bx	lr

08003a74 <__retarget_lock_acquire_recursive>:
 8003a74:	4770      	bx	lr

08003a76 <__retarget_lock_release_recursive>:
 8003a76:	4770      	bx	lr

08003a78 <_init>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr

08003a84 <_fini>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	bf00      	nop
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr
